% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/value-counts.R
\name{count_values}
\alias{count_values}
\alias{assert_single_value}
\alias{count_dupes}
\alias{assert_unique}
\title{Check for duplicate values
todo: add return value description}
\usage{
count_values(.data, col, by, setkey = FALSE)

assert_single_value(.data, col, by)

count_dupes(.data, by, setkey = FALSE)

assert_unique(.data, by, data_chr, by_chr)
}
\arguments{
\item{.data}{A data frame or data table}

\item{col}{tidy-select. A single column in `.data`}

\item{by}{tidy-select. Columns in `.data`}

\item{setkey}{Logical. Should the output be keyed by `by` cols?}

\item{data_chr}{character. You can use this argument to manually specify
the name of `data` shown in error messages. Useful when using these functions
as checks inside other functions.}

\item{by_chr}{character. You can use this argument to manually specify
the name of `by` shown in error messages. Useful when using these functions
as checks inside other functions.}
}
\description{
`assert_unique()` throws an error if there are multiple rows for any
combination of `by` variable values
`count_dupes()` returns values of `by` variables for which the `.data` has
multiple rows, along with the number of rows for each combination of values
}
\details{
`assert_single_value()` throws an error if there are multiple unique rows for
any combination of `by` variable values, only considering columns in `col`
`count_values()` returns values of `by` variables for which the `.data` has
multiple unique rows, along with the number of unique rows for each
combination of values, only considering columns in `col`
}
\examples{

df <- read.table(text = '
x y z
1 6 1
2 6 2
3 7 3
3 7 4
4 3 5
4 3 6
', header = T)

assert_unique(df, c(x, y))
#> Error in `assert_unique()`:
#> ! Input `df` is not unique by `c(x, y)`.
#> • First duplicate:
#> •  n_rows     x     y
#> •   <int> <int> <int>
#> •       2     3     7
#> • Use `count_dupes()` to see all duplicates.

count_dupes(df, c(x, y))
#>        x     y n_rows
#>    <int> <int>  <int>
#> 1:     3     7      2
#> 2:     4     3      2

df <- read.table(text = '
x y z
a 1 3
a 1 3
a 2 4
a 2 4
a 2 2
b 1 1
b 1 2
', header = T)

assert_single_value(df, z, by = c(x, y))
#> Error in `assert_single_value()`:
#> ! Column `z` is not unique by `c(x, y)`.
#> •       x     y n_vals
#> •  <char> <int>  <int>
#> •       a     2      2
#> • Use `count_values()` to see all groups with multiple values.

count_values(df, z, by = c(x, y))
#>         x     y n_vals
#>    <char> <int>  <int>
#> 1:      a     2      2
#> 2:      b     1      2
}
