[{"path":"https://eutwt.github.io/tablecompare/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 tablecompare authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eutwt.github.io/tablecompare/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Dickerson. Author, maintainer.","code":""},{"path":"https://eutwt.github.io/tablecompare/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dickerson R (2022). tablecompare: Compare Data Frames. R package version 0.1.1, https://eutwt.github.io/tablecompare/.","code":"@Manual{,   title = {tablecompare: Compare Data Frames},   author = {Ryan Dickerson},   year = {2022},   note = {R package version 0.1.1},   url = {https://eutwt.github.io/tablecompare/}, }"},{"path":[]},{"path":"https://eutwt.github.io/tablecompare/index.html","id":"defining-features","dir":"","previous_headings":"","what":"Defining features:","title":"Compare Data Frames","text":"output provided data frame list data frames Comparisons fast, driven data.table Functions column-selecting arguments use tidyselect","code":""},{"path":"https://eutwt.github.io/tablecompare/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compare Data Frames","text":"Install released version CRAN : install development version GitHub :","code":"install.packages(\"tablecompare\") # install.packages(\"devtools\") devtools::install_github(\"eutwt/tablecompare\")"},{"path":"https://eutwt.github.io/tablecompare/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Compare Data Frames","text":"Use tblcompare() see number differing values column - tblcompare()$summ columns one table - tblcompare()$unmatched_cols rows one table - tblcompare()$unmatched_rows Use value_diffs() see specific values different. row numbers i_a i_b allow easy subsetting original tables using value_diffs() output. Use all_value_diffs() combine value_diffs() output one table val_a val_b coerced character","code":"library(tablecompare)  example_df_a #>               car  mpg cyl  disp  hp drat    wt vs am #> 1:     Duster 360 14.3   8 360.0 245 3.21 3.570  0  0 #> 2:  Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875  0  1 #> 3:       Merc 230 22.8   4 140.8  95 3.92 3.150  1  0 #> 4:     Datsun 710 22.8  NA 109.0  93 3.85 2.320  1  1 #> 5:      Merc 240D 24.4   4 146.7  62 3.69 3.190  1  0 #> 6: Hornet 4 Drive 21.4   6 259.0 110 3.08 3.215  1  0 #> 7:      Mazda RX4 21.0   6 160.0 110 3.90 2.620  0  1 #> 8:        Valiant 18.1   6 225.0 105 2.76 3.460  1  0 #> 9:       Merc 280 19.2   6 167.6 123 3.92 3.440  1  0 example_df_b #>                car    wt  mpg  hp cyl  disp carb drat vs #>  1:      Merc 240D 3.190 26.4  62   4 146.7    2 3.69  1 #>  2:        Valiant 3.460 18.1 105   6 225.0    1 2.76  1 #>  3:     Duster 360 3.570 16.3 245   8 360.0    4 3.21  0 #>  4:     Datsun 710 2.320 22.8  93  NA 108.0    1 3.85  1 #>  5:      Merc 280C 3.440 17.8 123   6 167.6    4 3.92  1 #>  6:       Merc 280 3.440 19.2 123   6 167.6    4 3.92  1 #>  7: Hornet 4 Drive 3.215 21.4 110   6 258.0    1 3.08  1 #>  8:     Merc 450SE 4.070 16.4 180   8 275.8    3 3.07  0 #>  9:       Merc 230 3.150 22.8  95   4 140.8    2 3.92  1 #> 10:  Mazda RX4 Wag 2.875 21.0 110   6 160.0    4 3.90  0 comp <- tblcompare(example_df_a, example_df_b, by = car) comp #> $tables #>    table       name ncol nrow #> 1:     a example...    9    9 #> 2:     b example...    9   10 #>  #> $by #>    column   class_a   class_b #> 1:    car character character #>  #> $summ #>    column n_diffs class_a class_b       value_diffs #> 1:    cyl       0 integer integer <data.table[0x5]> #> 2:   disp       2 numeric numeric <data.table[2x5]> #> 3:   drat       0 numeric numeric <data.table[0x5]> #> 4:     hp       0 integer integer <data.table[0x5]> #> 5:    mpg       2 numeric numeric <data.table[2x5]> #> 6:     vs       0 integer integer <data.table[0x5]> #> 7:     wt       0 numeric numeric <data.table[0x5]> #>  #> $unmatched_cols #>    table column   class #> 1:     a     am integer #> 2:     b   carb integer #>  #> $unmatched_rows #>    table i        car #> 1:     a 7  Mazda RX4 #> 2:     b 5  Merc 280C #> 3:     b 8 Merc 450SE #>  #> attr(,\"class\") #> [1] \"tbc_comparison\" value_diffs(comp, disp) #>    i_a i_b val_a val_b            car #> 1:   4   4   109   108     Datsun 710 #> 2:   6   7   259   258 Hornet 4 Drive value_diffs(comp, mpg) #>    i_a i_b val_a val_b        car #> 1:   1   3  14.3  16.3 Duster 360 #> 2:   5   1  24.4  26.4  Merc 240D all_value_diffs(comp) #>    column i_a i_b val_a val_b            car #> 1:   disp   4   4   109   108     Datsun 710 #> 2:   disp   6   7   259   258 Hornet 4 Drive #> 3:    mpg   1   3  14.3  16.3     Duster 360 #> 4:    mpg   5   1  24.4  26.4      Merc 240D"},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the contents of a data frame — contents","title":"Show the contents of a data frame — contents","text":"Show contents data frame","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the contents of a data frame — contents","text":"","code":"contents(.data)"},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the contents of a data frame — contents","text":".data data frame data table","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the contents of a data frame — contents","text":"data.table one row per column .data columns \"column\": name column .data, \"class\": names classes column inherits (returned class()), collapsed single string.","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the contents of a data frame — contents","text":"","code":"contents(ToothGrowth) #>    column   class #> 1:   supp  factor #> 2:   dose numeric #> 3:    len numeric"},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate rows — count_dupes","title":"Check for duplicate rows — count_dupes","text":"count_dupes() returns values variables .data multiple rows, along number rows combination values. assert_unique() throws error multiple rows combination variable values","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate rows — count_dupes","text":"","code":"count_dupes(.data, by = everything(), setkey = FALSE)"},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate rows — count_dupes","text":".data data frame data table tidy-select. Columns .data setkey Logical. output keyed cols?","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicate rows — count_dupes","text":"data.table (filtered) columns additional column \"n_rows\" shows number rows .data combination values shown output row.","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate rows — count_dupes","text":"","code":"df <- read.table(text = \" x y z 1 6 1 2 6 2 3 7 3 3 7 4 4 3 5 4 3 6 \", header = TRUE)  count_dupes(df, c(x, y)) #>    x y n_rows #> 1: 3 7      2 #> 2: 4 3      2  if (FALSE) { assert_unique(df, c(x, y)) }"},{"path":"https://eutwt.github.io/tablecompare/reference/tablecompare-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tablecompare: Compare Data Frames — tablecompare-package","title":"tablecompare: Compare Data Frames — tablecompare-package","text":"Compare two tables","code":""},{"path":[]},{"path":"https://eutwt.github.io/tablecompare/reference/tablecompare-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tablecompare: Compare Data Frames — tablecompare-package","text":"Maintainer: Ryan Dickerson fresh.tent5866@fastmail.com","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tbc_slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows based on a comparison — slice_diffs","title":"Subset rows based on a comparison — slice_diffs","text":"Subset rows based comparison","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tbc_slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows based on a comparison — slice_diffs","text":"","code":"slice_diffs(a, b, comp, cols = everything())  slice_diffs_a(a, comp, cols = everything())  slice_diffs_b(b, comp, cols = everything())  slice_same_a(a, comp, cols = everything())  slice_same_b(b, comp, cols = everything())"},{"path":"https://eutwt.github.io/tablecompare/reference/tbc_slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows based on a comparison — slice_diffs","text":"original data frame .data_a passed tablecompare() call created comparison b original data frame .data_b passed tablecompare() call created comparison comp object class \"tbc_comparison\" (output tablecompare::tablecompare() call) cols tidy-select. slice_diff()/slice_same() output contain rows differing/values one supplied cols.","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tbc_slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows based on a comparison — slice_diffs","text":"slice_diffs() returns data.table rows comparison table .data_a values different .data_b, followed corresponding row .data_b. columns contained tables included. slice_diffs_a() returns data.table rows comparison table .data_a values different .data_b slice_diffs_b() returns data.table rows comparison table .data_b values different .data_a slice_same_a() returns data.table rows comparison table .data_a values .data_b slice_same_b() returns data.table rows comparison table .data_b values .data_a","code":""},{"path":[]},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two data frames — tblcompare","title":"Compare two data frames — tblcompare","text":"Compare two data frames","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two data frames — tblcompare","text":"","code":"tblcompare(   .data_a,   .data_b,   by,   allow_bothNA = TRUE,   ncol_by_out = 3,   coerce = TRUE )  value_diffs(comparison, col)  all_value_diffs(comparison)"},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two data frames — tblcompare","text":".data_a data frame data table .data_b data frame data table tidy-select. Selection columns use matching rows .data_a .data_b. data frames must unique . allow_bothNA Logical. TRUE missing value data frames considered equal ncol_by_out Number -columns include value_diffs unmatched_rows output coerce Logical. FALSE columns class compared. comparison object class \"tbc_comparison\" (output tablecompare::tablecompare() call) col tidy-select. single column","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two data frames — tblcompare","text":"tblcompare() \"tbc_comparison\"-class object, list data.tables following elements: tables data.table one row per input table showing number rows     columns . data.table one row per column showing class     column input tables. summ data.table one row per column common .data_a    .data_b columns \"n_diffs\" showing number values    different two tables, \"class_a\"/\"class_b\" class    column table, \"value_diffs\" (nested) data.table showing    rows input table values unequal, values    table, one column first ncol_by_out columns    identified rows input tables. unmatched_cols data.table one row per column one input table    columns \"table\": table column appears ,    \"column\": name column, \"class\": class    column. unmatched_rows data.table , row present one input table    , contains columns \"table\": table row appears ,    \"\" row number input row, one column first    ncol_by_out columns row. value_diffs() data.table one row element col found unequal input tables ( .data_a .data_b original tblcompare() call) output table columns \"i_a\"/\"i_b\": row number element input tables, \"val_a\"/\"val_b\": value col input tables, one column first ncol_by_out columns identified rows input tables. all_value_diffs() data.table value_diffs() output columns least one value difference, combined row-wise single table. facilitate combination single table, \"val_a\" \"val_b\" columns coerced character.","code":""}]
