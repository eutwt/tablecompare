[{"path":"https://eutwt.github.io/tablecompare/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 tablecompare authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eutwt.github.io/tablecompare/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Dickerson. Author, maintainer.","code":""},{"path":"https://eutwt.github.io/tablecompare/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dickerson R (2022). tablecompare: Compare Data Frames. R package version 0.1.0, https://eutwt.github.io/tablecompare/.","code":"@Manual{,   title = {tablecompare: Compare Data Frames},   author = {Ryan Dickerson},   year = {2022},   note = {R package version 0.1.0},   url = {https://eutwt.github.io/tablecompare/}, }"},{"path":"https://eutwt.github.io/tablecompare/index.html","id":"tablecompare","dir":"","previous_headings":"","what":"Compare Data Frames","title":"Compare Data Frames","text":"Compare two tables set ID variables. two slightly modified versions mtcars tablecompare, able easily see rows different values, rows one table, columns one table can use value_diffs(<tblcomp>) see specific values different. Created 2022-03-11 reprex package (v2.0.1)","code":"library(tablecompare) library(magrittr) library(data.table)  df_a <-   mtcars %>%     as.data.table(keep.rownames = \"car\") %>%     .[, ':='(disp = replace(disp, 3:4, disp[3:4] + 1),              cyl = replace(cyl, 3, NA),              extracol_a = 1)] %>%     .[1:10] %>%     rbind(., .[1][, car := \"extra_a\"])  df_b <-   mtcars %>%     as.data.table(keep.rownames = \"car\") %>%     .[, ':='(mpg = replace(mpg, 7:8, mpg[7:8] + 2),              cyl = replace(cyl, 3, NA),              wt = as.character(wt))] %>%     .[2:12] %>%     rbind(., .[1][, car := \"extra_b\"]) comp <- tblcompare(df_a, df_b, by = car) comp #> $tables #>    table name ncol nrow #> 1:     a df_a   13   11 #> 2:     b df_b   12   12 #>  #> $by #>    column   class_a   class_b #> 1:    car character character #>  #> $summ #>     column n_diffs class_a   class_b       value_diffs #>  1:     am       0 numeric   numeric <data.table[0x5]> #>  2:   carb       0 numeric   numeric <data.table[0x5]> #>  3:    cyl       0 numeric   numeric <data.table[0x5]> #>  4:   disp       2 numeric   numeric <data.table[2x5]> #>  5:   drat       0 numeric   numeric <data.table[0x5]> #>  6:   gear       0 numeric   numeric <data.table[0x5]> #>  7:     hp       0 numeric   numeric <data.table[0x5]> #>  8:    mpg       2 numeric   numeric <data.table[2x5]> #>  9:   qsec       0 numeric   numeric <data.table[0x5]> #> 10:     vs       0 numeric   numeric <data.table[0x5]> #> 11:     wt       0 numeric character <data.table[0x5]> #>  #> $unmatched_cols #>    table     column   class #> 1:     a extracol_a numeric #>  #> $unmatched_rows #>    table  i        car #> 1:     a  1  Mazda RX4 #> 2:     a 11    extra_a #> 3:     b 10  Merc 280C #> 4:     b 11 Merc 450SE #> 5:     b 12    extra_b #>  #> attr(,\"class\") #> [1] \"tbcmp_compare\" value_diffs(comp) #>    column i_a i_b val_a val_b            car #> 1:   disp   3   2 109.0 108.0     Datsun 710 #> 2:   disp   4   3 259.0 258.0 Hornet 4 Drive #> 3:    mpg   7   6  14.3  16.3     Duster 360 #> 4:    mpg   8   7  24.4  26.4      Merc 240D"},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the contents of a data frame — contents","title":"Show the contents of a data frame — contents","text":"Show contents data frame","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the contents of a data frame — contents","text":"","code":"contents(.data, cat_nrow = TRUE, big_mark = \",\")"},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the contents of a data frame — contents","text":".data data frame cat_nrow Logical. true, number rows `cat`ed big_mark Passed `big.mark` argument `format` formatting number rows","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/contents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the contents of a data frame — contents","text":"","code":"if (FALSE) { contents(ToothGrowth) #> Number of Rows: 60 #>    column   class #>    <char>  <char> #> 1:   supp  factor #> 2:   dose numeric #> 3:    len numeric }"},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate rows — count_dupes","title":"Check for duplicate rows — count_dupes","text":"`count_dupes()` returns values `` variables `.data` multiple rows, along number rows combination values. `assert_unique()` throws error multiple rows combination `` variable values","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate rows — count_dupes","text":"","code":"count_dupes(.data, by, setkey = FALSE)  assert_unique(.data, by, data_chr, by_chr)"},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate rows — count_dupes","text":".data data frame data table tidy-select. Columns `.data` setkey Logical. output keyed `` cols? data_chr optional. character. can use argument manually specify name `data` shown error messages. Useful using functions checks inside functions. by_chr optional. character. can use argument manually specify name `` shown error messages. Useful using functions checks inside functions.","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-dupes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate rows — count_dupes","text":"","code":"if (FALSE) { df <- read.table(text = ' x y z 1 6 1 2 6 2 3 7 3 3 7 4 4 3 5 4 3 6 ', header = TRUE)  assert_unique(df, c(x, y)) #> Error in `assert_unique()`: #> ! Input `df` is not unique by `c(x, y)`. #> • First duplicate: #> •  n_rows     x     y #> •   <int> <int> <int> #> •       2     3     7 #> • Use `count_dupes()` to see all duplicates.  count_dupes(df, c(x, y)) #>        x     y n_rows #>    <int> <int>  <int> #> 1:     3     7      2 #> 2:     4     3      2 }"},{"path":"https://eutwt.github.io/tablecompare/reference/count-values.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate values — count_values","title":"Check for duplicate values — count_values","text":"`count_values()` returns values `` variables `.data` multiple unique rows, along number unique rows combination values, considering columns `col` `assert_single_value()` throws error multiple unique rows combination `` variable values, considering columns `col`","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate values — count_values","text":"","code":"count_values(.data, col, by, setkey = FALSE)  assert_single_value(.data, col, by)"},{"path":"https://eutwt.github.io/tablecompare/reference/count-values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate values — count_values","text":".data data frame data table col tidy-select. single column `.data` tidy-select. Columns `.data` setkey Logical. output keyed `` cols?","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/count-values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate values — count_values","text":"","code":"if (FALSE) { df <- read.table(text = ' x y z a 1 3 a 1 3 a 2 4 a 2 4 a 2 2 b 1 1 b 1 2 ', header = TRUE)  assert_single_value(df, z, by = c(x, y)) #> Error in `assert_single_value()`: #> ! Column `z` is not unique by `c(x, y)`. #> •       x     y n_vals #> •  <char> <int>  <int> #> •       a     2      2 #> • Use `count_values()` to see all groups with multiple values.  count_values(df, z, by = c(x, y)) #>         x     y n_vals #>    <char> <int>  <int> #> 1:      a     2      2 #> 2:      b     1      2 }"},{"path":"https://eutwt.github.io/tablecompare/reference/tablecompare-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tablecompare: Compare Data Frames — tablecompare-package","title":"tablecompare: Compare Data Frames — tablecompare-package","text":"Compare two tables","code":""},{"path":[]},{"path":"https://eutwt.github.io/tablecompare/reference/tablecompare-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tablecompare: Compare Data Frames — tablecompare-package","text":"Maintainer: Ryan Dickerson fresh.tent5866@fastmail.com","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two data frames — tblcompare","title":"Compare two data frames — tblcompare","text":"Compare two data frames","code":""},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two data frames — tblcompare","text":"","code":"tblcompare(   .data_a,   .data_b,   by,   allow_bothNA = TRUE,   ncol_by_out = 3,   coerce = TRUE )  value_diffs(comparison)"},{"path":"https://eutwt.github.io/tablecompare/reference/tblcompare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two data frames — tblcompare","text":".data_a data frame .data_b data frame tidy-select selection columns allow_bothNA Logical. TRUE missing value data frames considered equal ncol_by_out Number -columns include `col_diffs` `unmatched_rows` output coerce Logical. False columns class compared. comparison output `tablecompare::tablecompare()` call.","code":""}]
